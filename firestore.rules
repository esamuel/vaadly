rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions (claims-based RBAC)
    function authed() { return request.auth != null; }
    function isPlatformAdmin() { return authed() && request.auth.token.platformAdmin == true; }
    function rolesByBld() { return authed() && request.auth.token.rolesByBuilding != null ? request.auth.token.rolesByBuilding : {}; }
    function hasRole(bid, role) { return rolesByBld()[bid] == role; }
    function inBuilding(bid) { return rolesByBld()[bid] != null || isPlatformAdmin(); }
    function isSelf(uidField) { return authed() && request.auth.uid == uidField; }

    // Production: No global allow-all. Access is controlled per-collection below.

    // Users collection (claims-based)
    match /users/{userId} {
      allow read: if isPlatformAdmin() || isSelf(userId);
      allow create, update: if authed() && isSelf(userId);
    }

    // Buildings collection (flat top-level)
    match /buildings/{buildingId} {
      allow read: if inBuilding(buildingId);
      allow create, update: if isPlatformAdmin() || hasRole(buildingId, 'committee');
      allow delete: if isPlatformAdmin();
      
      // Building residents subcollection
      match /residents/{residentId} {
        allow read: if inBuilding(buildingId);
        allow write, create, update: if isPlatformAdmin() || hasRole(buildingId, 'committee');
        allow delete: if isPlatformAdmin() || hasRole(buildingId, 'committee');
      }
      
      // Building units subcollection
      match /units/{unitId} {
        allow read: if inBuilding(buildingId);
        allow write, create, update, delete: if isPlatformAdmin() || hasRole(buildingId, 'committee');
      }
      
      // Maintenance requests subcollection
      match /maintenance/{requestId} {
        allow read, create, update, delete: if isPlatformAdmin() || hasRole(buildingId, 'committee');
      }

      // Work orders subcollection (used by backend triggers)
      match /work_orders/{workOrderId} {
        allow read: if inBuilding(buildingId);
        allow create, update, delete: if isPlatformAdmin() || hasRole(buildingId, 'committee');
      }
      
      // Financial records subcollection
      match /finances/{recordId} {
        allow read: if inBuilding(buildingId);
        allow write, create, update, delete: if isPlatformAdmin() || hasRole(buildingId, 'committee');
      }
      
      // Building announcements subcollection
      match /announcements/{announcementId} {
        allow read: if inBuilding(buildingId);
        allow write, create, update, delete: if isPlatformAdmin() || hasRole(buildingId, 'committee');
      }
      
      // Building settings subcollection
      match /settings/{settingId} {
        allow read: if inBuilding(buildingId);
        allow write, create, update, delete: if isPlatformAdmin() || hasRole(buildingId, 'committee');
      }
    }

    // Top-level collections per spec
    match /memberships/{membershipId} {
      allow read: if isPlatformAdmin() || (authed() && resource.data.userId == request.auth.uid) || (authed() && hasRole(resource.data.buildingId, 'committee'));
      allow create, update: if isPlatformAdmin() || hasRole(request.resource.data.buildingId, 'committee');
    }

    match /tickets/{ticketId} {
      allow read: if inBuilding(resource.data.buildingId);
      allow create: if inBuilding(request.resource.data.buildingId);
      allow update: if hasRole(resource.data.buildingId, 'committee') || isSelf(resource.data.createdBy);
    }

    match /invoices/{invoiceId} {
      allow read: if isPlatformAdmin() || hasRole(resource.data.buildingId, 'committee') || isSelf(resource.data.residentUid);
      allow create, update: if isPlatformAdmin() || hasRole(request.resource.data.buildingId, 'committee');
    }

    match /payments/{paymentId} {
      allow read: if isPlatformAdmin() || hasRole(resource.data.buildingId, 'committee') || isSelf(resource.data.residentUid);
      allow create: if isSelf(request.resource.data.residentUid) && inBuilding(request.resource.data.buildingId);
    }

    match /vendors/{vendorId} {
      allow read: if inBuilding(resource.data.buildingId);
      allow create, update: if isPlatformAdmin() || hasRole(request.resource.data.buildingId, 'committee');
    }

    match /announcements/{announcementId} {
      allow read: if inBuilding(resource.data.buildingId);
      allow create, update: if isPlatformAdmin() || hasRole(request.resource.data.buildingId, 'committee');
    }

    // System-wide collections (platform admin only)
    match /system/{document=**} {
      allow read, write: if isPlatformAdmin();
    }
    
    match /analytics/{document=**} {
      allow read, write: if isPlatformAdmin();
    }
  }
}
